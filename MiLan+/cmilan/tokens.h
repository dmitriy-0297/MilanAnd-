#ifndef TOKENS_H
#define TOKENS_H
enum Token {
	T_EOF,			// Конец текстового потока
	T_ILLEGAL,		// Признак недопустимого символа
	T_IDENTIFIER,	// Идентификатор
	T_NUMBER,		// Целочисленный литерал
	T_BEGIN,		// Ключевое слово "begin"
	T_END,			// Ключевое слово "end"
	T_IF,			// Ключевое слово "if"
	T_THEN,			// Ключевое слово "then"
	T_ELSE,			// Ключевое слово "else"
	T_FI,			// Ключевое слово "fi"
	T_WHILE,		// Ключевое слово "while"
	T_DO,			// Ключевое слово "do"
	T_OD,			// Ключевое слово "od"
	T_WRITE,		// Ключевое слово "write"
	T_READ,			// Ключевое слово "read"
	T_ASSIGN,		// Оператор ":="
	T_ADDOP,		// Сводная лексема для "+" и "-" (операция типа сложения)
	T_MULOP,		// Сводная лексема для "*" и "/" (операция типа умножения)
	T_CMP,			// Сводная лексема для операторов отношения
	T_LPAREN,		// Открывающая скобка
	T_RPAREN,		// Закрывающая скобка
	T_SEMICOLON,	// ";"
	T_TERNARY,      // "?"-символ
	T_TERNARY_VAR,  // ":"-символ
};

// Виды операций сравнения
enum Cmp
{
	C_EQ,   // Операция сравнения "="
	C_NE,	// Операция сравнения "!="
	C_LT,	// Операция сравнения "<"
	C_GT,	// Операция сравнения ">"
	C_LE,	// Операция сравнения "<="
	C_GE,	// Операция сравнения ">="
};

// Виды арифметических операций
enum Arithmetic
{
	A_PLUS,		//операция "+"
	A_MINUS,	//операция "-"
	A_MULTIPLY,	//операция "*"
	A_DIVIDE,	//операция "/"
};


// Функция tokenToString возвращает описание лексемы.
// Используется при печати сообщения об ошибке.
const char * tokenToString(Token t);

#endif
